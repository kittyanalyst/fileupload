buildscript {
	ext {
		springBootVersion = '1.4.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id "org.flywaydb.flyway" version "4.0"
}

group = 'com.amiti'
version = '1.0-SNAPSHOT'
description = "File Upload API"

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'
apply plugin: 'war'


war {
	baseName = 'fileupload-api'
	version = version
}


sourceSets {
	generated {
		java {
			srcDirs = ['src/main/generated']
		}
	}

	itest {
		java {
			srcDirs = ['src/itest/java']
		}
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

springBoot {
	mainClass = 'com.amiti.cloud.FileuploadApplication'
}

ext {
	postgresDriver = 'org.postgresql.Driver'
	postgresDefaultDbName = 'postgres'
	postgresDbName = 'fileupload'
	postgresHost = System.getenv('POSTGRES_HOST')
	postgresPort = System.getenv('POSTGRES_PORT')
	postgresUrl = "jdbc:postgresql://${postgresHost}:${postgresPort}/${postgresDbName}"
	postgresUser = System.getenv('POSTGRES_USER')
	postgresPassword = System.getenv('POSTGRES_PASSWORD')
}

processResources {
	filesMatching('application.properties') {
		expand(project.properties)
	}
}

flyway {
	driver = postgresDriver
	url = postgresUrl
	user = postgresUser
	password = postgresPassword
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	classpath
	querydslapt
	providedRuntime
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-actuator-docs')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-jersey')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('com.vaadin:vaadin-spring-boot-starter:1.0.1')
	compile('org.springframework.boot:spring-boot-starter-web')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testCompile('org.springframework.boot:spring-boot-starter-test')

	//postgres
	compile('postgresql:postgresql:9.1-901-1.jdbc4')

	//cxf
	compile('org.apache.cxf:cxf-rt-frontend-jaxrs:3.1.6')
	compile('org.apache.cxf:cxf-rt-rs-service-description:3.1.6')
	compile('org.apache.cxf:cxf-rt-rs-security-cors:3.1.6')

	//swagger
	compile('io.swagger:swagger-jaxrs:1.5.8')

	//flyway for db migrations
	compile('org.flywaydb:flyway-core:4.0')

	//QueryDSL
	compile('com.querydsl:querydsl-core:4.1.3')
	compile('com.querydsl:querydsl-jpa:4.1.3')
	querydslapt('com.querydsl:querydsl-apt:4.1.3')

}

dependencyManagement {
	imports {
		mavenBom "com.vaadin:vaadin-bom:7.7.3"
	}
}

clean {
	delete sourceSets.generated.java.srcDirs
}

idea {
	module {
		sourceDirs += file('src/main/generated')
	}
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
	source = sourceSets.main.java
	classpath = configurations.compile + configurations.querydslapt
	options.compilerArgs = [
			"-proc:only",
			"-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
	]
	destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
	dependsOn generateQueryDSL
	source generateQueryDSL.destinationDir
}


compileGeneratedJava {
	dependsOn generateQueryDSL
	options.warnings = false
	classpath += sourceSets.main.runtimeClasspath
}

